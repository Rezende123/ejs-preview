{
    "about_ejs": "Sobre EJS",
    "what_is": "O que é?",
    "what_is_content": "O 'E' é algo variável, pode ser 'Embedded', assim como 'Effective', 'Elegant' ou até 'Easy'. EJS é uma linguagem de modelagem simples, que gera código HTML com simples marcação de JavaScript. Sem muito rigor para organizar as coisas. Sem reinventar iteração ou controle de fluxo. É simplesmente JavaScript.",
    "how_to_use": "Como Usar?",
    "how_to_use_content": "Nesta aplicação o ejs é renderizado através do template (EJS), passagem dos dados e das opções de configuração via JSON.",
    "resources": "Recursos",
    "control_flow_with": "Fluxo de controle com",
    "show_out_with": "Exibir saída com",
    "jump_line_with": "Pular linha com",
    "in_final_tag": "no final da tag",
    "white_space_control": "Espaço em branco para controlar o fluxo com",
    "delimiters": "Delimitadores customizados com (e.g.",
    "instead_of": "ao invés de",
    "about_more": "Para saber mais sobre a estrutura deste template recomendo ler em",

    "template": "Template",
    "data": "Dados",
    "options": "Opções",
    "rendered": "Renderizado",
    "code": "Código",

    "err_json_format": "Erro no formato do JSON",

    "en": "Inglês",
    "pt": "Portugês",

    "option_content": "<li><span class='code'>views</span> Uma matriz de caminhos a serem usados ao resolver inclui com caminhos relativos.</li><li><span class='code'>client</span>Retorna a função compilada autônoma</li><li><span class='code'>delimiter</span></li><li><span class='code'>openDelimiter</span></li><li><span class='code'>closeDelimiter</span></li><li><span class='code'>debug</span> Saída gerada pela função</li><li><span class='code'>strict</span> Quando definida como `true`, a função gerada está no modo estrito</li><li><span class='code'>_with</span> Se deve ou não usar <span class='code'> with() {} </span> construções. Se <span class='code'>false</span> os locais serão armazenados no <span class='code'>locals</span> objeto. (Implies `--strict`)</li><li><span class='code'>rmWhitespace</span> Remova todo o espaço em branco seguro para remover, incluindo os espaços em branco à esquerda e à direita. Também permite uma versão mais segura do <span class='code'>-%&gt;</span> slurping de linha para todas as tags de scriptlet (não remove novas linhas de tags no meio de uma linha).</li><li><span class='code'>escape</span> A função de escape usada com <span class='code'>&lt;%=</span> construção. É usado na renderização e é <span class='code'>.toString()</span>na geração de funções do cliente. (Por padrão, escapa XML).</li>",
    "tags_content": "<li><span class='code'>&lt;%</span> 'Scriptlet' tag, para controle de fluxo, sem saída.</li><li><span class='code'>&lt;%_</span> ‘Whitespace Slurping’ Scriptlet tag, retira todo o espaço em branco antes de</li><li><span class='code'>&lt;%=</span> Envia o valor para o modelo (HTML escaped)</li><li><span class='code'>&lt;%-</span> Envia o valor sem escape para o modelo</li><li><span class='code'>&lt;%#</span> Tag de comentário, sem execução, sem saída </li><li><span class='code'>&lt;%%</span> Outputs a literal '&lt;%'</li><li><span class='code'>%&gt;</span> Tag final simples</li><li><span class='code'>-%&gt;</span> Trim-mode ('newline slurp') tag, apara após nova linha</li><li><span class='code'>_%&gt;</span> ‘Whitespace Slurping’ no final da tag, remove todo o espaço em branco após</li>",
    "includes_content": "As inclusões são relativas ao modelo com a chamada de inclusão. (Isso requer a opção 'filename'.) Por exemplo, se você tiver './views/users.ejs' e './views/user/show.ejs', você usaria <span class='code'><%- include('user/show'); %></span>.<br>Você provavelmente desejará usar a tag de saída bruta (<% -) com seu include para evitar o escape duplo da saída HTML."
}