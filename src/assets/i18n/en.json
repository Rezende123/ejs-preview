{
    "about_ejs": "About EJS",
    "what_is": "What is?",
    "what_is_content": "What is the ‘E’ for? ‘Embedded?’ Could be. How about ‘Effective’, ‘Elegant’, or just ‘Easy’? EJS is a simple templating language that lets you generate HTML markup with plain JavaScript. No religiousness about how to organize things. No reinvention of iteration and control-flow. It's just plain JavaScript.",
    "how_to_use": "How to use?",
    "how_to_use_content": "In this application the ejs is render through a template (EJS), passage of data and config options by JSON.",
    "resources": "Resources",
    "control_flow_with": "Control flow with",
    "show_out_with": "Escaped output with",
    "jump_line_with": "Newline-trim mode ('newline slurping') with",
    "in_final_tag": "ending tag",
    "white_space_control": "Whitespace-trim mode (slurp all whitespace) for control flow with",
    "delimiters": "Custom delimiters (e.g.",
    "instead_of": "instead of",
    "about_more": "To know about the structure is recommended read in",

    "template": "Template",
    "data": "Data",
    "options": "Options",
    "rendered": "Rendered",
    "code": "Code",

    "err_json_format": "Error in JSON format",

    "en": "English",
    "pt": "Portugese",

    "option_content": "<li><span class='code'>views</span> An array of paths to use when resolving includes with relative paths.</li><li><span class='code'>context</span> Function execution context</li><li><span class='code'>client</span> Returns standalone compiled function</li><li><span class='code'>delimiter</span></li><li><span class='code'>openDelimiter</span></li><li><span class='code'>closeDelimiter</span></li><li><span class='code'>debug</span> Outputs generated function body</li><li><span class='code'>strict</span> When set to `true`, generated function is in strict mode</li><li><span class='code'>_with</span> Whether or not to use <span class='code'> with() {} </span> constructs. If <span class='code'>false</span> then the locals will be stored in the <span class='code'>locals</span> object. (Implies `--strict`)</li><li><span class='code'>rmWhitespace</span> Remove all safe-to-remove whitespace, including leading and trailing whitespace. It also enables a safer version of <span class='code'>-%&gt;</span> line slurping for all scriptlet tags (it does not strip new lines of tags in the middle of a line).</li><li><span class='code'>escape</span> The escaping function used with <span class='code'>&lt;%=</span> construct. It is used in rendering and is <span class='code'>.toString()</span>ed in the generation of client functions. (By default escapes XML).</li>",
    "tags_content": "<li><span class='code'>&lt;%</span> 'Scriptlet' tag, for control-flow, no output</li><li><span class='code'>&lt;%_</span> ‘Whitespace Slurping’ Scriptlet tag, strips all whitespace before it</li><li><span class='code'>&lt;%=</span> Outputs the value into the template (HTML escaped)</li><li><span class='code'>&lt;%-</span> Outputs the unescaped value into the template</li><li><span class='code'>&lt;%#</span> Comment tag, no execution, no output</li><li><span class='code'>&lt;%%</span> Outputs a literal '&lt;%'</li><li><span class='code'>%&gt;</span> Plain ending tag</li><li><span class='code'>-%&gt;</span> Trim-mode ('newline slurp') tag, trims following newline</li><li><span class='code'>_%&gt;</span> ‘Whitespace Slurping’ ending tag, removes all whitespace after it</li>",
    "includes_content": "Includes are relative to the template with the include call. (This requires the 'filename' option.) For example if you have './views/users.ejs' and './views/user/show.ejs' you would use <span class='code'><%- include('user/show'); %></span>.<br>You'll likely want to use the raw output tag (<%-) with your include to avoid double-escaping the HTML output."

}